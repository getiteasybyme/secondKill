<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

  <display-name>arsystem</display-name>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- 1)监听器Listener就是在application(web容器启动), session(用户打开一个网页),
       request（一次具体请求）三个对象创建、销毁或者往其中添加/修改/删除属性
       时自动执行代码的功能组件。Listener配置信息必须在Filter和Servlet配置之前，Listener的初始
       化（ServletContentListener初始化）比Servlet和Filter都优先，而销毁比Servlet和Filter都慢。 -->

  <!-- 当用户修改配置文件，动态地改变log记录级别和策略，此时不需要重启Web应用
       log4jRefreshInterval为6000表示开一条watchdog线程每6秒扫描一下配置文件的变化 -->
  <!-- Note: This listener should be placed before ContextLoaderListener in web.xml -->
  <context-param>
    <!-- 该参数表示“项目的运行路径”, 可以配置任意值，如果不配置默认值是"webapp.root".
         部署在同一容器中的Web项目，要配置不同的<param-value>，不能重复，否则会引起冲突 -->
    <!-- WARNING: Some containers, e.g.Tomcat, do NOT keep system properties separate per web app.
  You have to use unique "webAppRootKey" context-params per web app then, to avoid clashes. -->
    <param-name>webAppRootKey</param-name>
    <param-value>webapp.root</param-value>
  </context-param>
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>
  <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>60000</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <!-- 加载spring容器 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext-*.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- 2)Filter 对用户请求进行预处理，接着将请求交给Servlet 进行处理并生成响应，最后Filter再对
       服务器响应进行后处理.web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter -->
  <!-- 解决跨域资源共享 -->

  <!-- 解决post乱码 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name><!--用来指定一个具体的字符集-->
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name><!--true：无论request是否指定了字符集，
            都是用encoding；false：如果request已指定一个字符集，则不使用encoding-->
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 跨域配置-->
  <filter>
    <!-- The CORS filter with parameters -->
    <filter-name>CORS</filter-name>
    <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>

    <!-- Note: All parameters are options, if omitted the CORS
         Filter will fall back to the respective default values.
      -->
    <init-param>
      <param-name>cors.allowGenericHttpRequests</param-name>
      <param-value>true</param-value>
    </init-param>

    <init-param>
      <param-name>cors.allowOrigin</param-name>
      <param-value>*</param-value>
    </init-param>

    <init-param>
      <param-name>cors.allowSubdomains</param-name>
      <param-value>false</param-value>
    </init-param>

    <init-param>
      <param-name>allowMethods</param-name>
      <param-value>GET,POST,PUT,DELETE,OPTIONS</param-value>
    </init-param>

    <init-param>
      <param-name>cors.supportedMethods</param-name>
      <param-value>GET,POST,PUT,DELETE,OPTIONS</param-value>
    </init-param>

    <init-param>
      <param-name>cors.supportedHeaders</param-name>
      <param-value>Accept, Origin, X-Requested-With, Content-Type, Last-Modified</param-value>
    </init-param>

    <init-param>
      <param-name>cors.exposedHeaders</param-name>
      <!--这里可以添加一些自己的暴露Headers   -->
      <param-value>X-Test-1, X-Test-2</param-value>
    </init-param>

    <init-param>
      <param-name>cors.supportsCredentials</param-name>
      <param-value>true</param-value>
    </init-param>

    <init-param>
      <param-name>cors.maxAge</param-name>
      <param-value>3600</param-value>
    </init-param>

  </filter>

  <filter-mapping>
    <!-- CORS Filter mapping -->
    <filter-name>CORS</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- 配置过滤器 将POST请求转换为PUT和DELETE请求 -->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <servlet-name>DispatcherServlet</servlet-name>
  </filter-mapping>

  <!-- springmvc的前端控制器 -->
  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation，
    springmvc的配置文件默认在：WEB-INF/servlet的name+"-servlet.xml" -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>DispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>